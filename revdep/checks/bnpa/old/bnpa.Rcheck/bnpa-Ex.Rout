
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bnpa"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('bnpa')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("boot.strap.bn")
> ### * boot.strap.bn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boot.strap.bn
> ### Title: Executes a bootstrap during the learning of a BN structure
> ### Aliases: boot.strap.bn
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Clean environment
> ##D closeAllConnections()
> ##D rm(list=ls())
> ##D # Set enviroment
> ##D # setwd("to your working directory")
> ##D # Load packages
> ##D library(bnpa)
> ##D # Use working data sets from package
> ##D data(dataQualiN)
> ##D # Start the cluster
> ##D cl <- bnpa::create.cluster()
> ##D # Set the number of replications
> ##D nreplicates=1000
> ##D # Set the algorithm to be used
> ##D bn.algorithm="hc"
> ##D # Executes a parallel bootstrap process
> ##D data.bn.boot.strap=bnlearn::boot.strength(data = dataQualiN, R = nreplicates, algorithm =
> ##D bn.algorithm, cluster=cl, algorithm.args=list(score="bic"), cpdag = FALSE)
> ##D # Release the cluster
> ##D parallel::stopCluster(cl)
> ##D head(data.bn.boot.strap)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("check.algorithms")
> ### * check.algorithms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.algorithms
> ### Title: Verifies the BN learning algorithms
> ### Aliases: check.algorithms
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("~/your working directory")
> # Load packages
> library(bnpa)
> # Set what BN learning algorithms will be used
> bn.learn.algorithms <- c("gs", "hc")
> # Check these algorithms
> check.algorithms(bn.learn.algorithms)


Verifying the BN learn algorithms...[1] "gs" "hc"

Algorithm  gs is OK
Algorithm  hc is OK> 
> 
> 
> cleanEx()
> nameEx("check.dichotomic.one.var")
> ### * check.dichotomic.one.var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.dichotomic.one.var
> ### Title: Verify if one specific variable of a data set is dichotomic
> ### Aliases: check.dichotomic.one.var
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQuantC)
> head(dataQuantC)
           A          B         C         D         E        F        G
1  1.1130829  1.9321639  7.074806  8.660411 0.8815912 24.71950 9.216382
2 -0.2479482 11.3343429 24.347372 23.355432 7.0401132 36.81300 3.678833
3  1.8545084  3.0320201 11.086473 11.055891 3.8345302 22.01718 2.424513
4  0.8339109  3.8579701 11.224775 11.937471 1.0056242 23.28564 6.085473
5  0.4886137  4.5126131 10.000476 12.537179 4.0847458 24.53760 5.117575
6  1.6495578  0.8508169  6.857060  7.094566 6.5108420 27.69884 7.691892
> # Show the structure of data set
> str(dataQuantC)
'data.frame':	500 obs. of  7 variables:
 $ A: num  1.113 -0.248 1.855 0.834 0.489 ...
 $ B: num  1.93 11.33 3.03 3.86 4.51 ...
 $ C: num  7.07 24.35 11.09 11.22 10 ...
 $ D: num  8.66 23.36 11.06 11.94 12.54 ...
 $ E: num  0.882 7.04 3.835 1.006 4.085 ...
 $ F: num  24.7 36.8 22 23.3 24.5 ...
 $ G: num  9.22 3.68 2.42 6.09 5.12 ...
> # Set variable name
> variable.name = "A"
> # data set has not dichotomic variables and function will return FALSE
> check.dichotomic.one.var(dataQuantC, variable.name)
[1] FALSE
> # Adding dichotomic data to dataQuantC
> dataQuantC$Z <- round(runif(500, min=0, max=1),0)
> # Show the new structure of data set
> str(dataQuantC)
'data.frame':	500 obs. of  8 variables:
 $ A: num  1.113 -0.248 1.855 0.834 0.489 ...
 $ B: num  1.93 11.33 3.03 3.86 4.51 ...
 $ C: num  7.07 24.35 11.09 11.22 10 ...
 $ D: num  8.66 23.36 11.06 11.94 12.54 ...
 $ E: num  0.882 7.04 3.835 1.006 4.085 ...
 $ F: num  24.7 36.8 22 23.3 24.5 ...
 $ G: num  9.22 3.68 2.42 6.09 5.12 ...
 $ Z: num  0 0 1 1 0 1 1 1 1 0 ...
> # Set variable name
> variable.name = "Z"
> # Now data set has dichotomic variables and function will return TRUE
> check.dichotomic.one.var(dataQuantC, variable.name)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("check.levels.one.variable")
> ### * check.levels.one.variable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.levels.one.variable
> ### Title: Check the levels of a categorical variable
> ### Aliases: check.levels.one.variable
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQualiN)
> head(dataQualiN)
   A   S   T  L   B   E   X   D
1 no yes  no no yes  no  no yes
2 no yes  no no  no  no  no  no
3 no  no yes no  no yes yes yes
4 no  no  no no yes  no  no yes
5 no  no  no no  no  no  no yes
6 no yes  no no  no  no  no yes
> # Adding random data to dataQualiN, function will return TRUE
> dataQualiN$Z <- round(runif(500, min=0, max=1000),2)
> # Converting the numeric variable into factor
> dataQualiN$Z <- factor(dataQualiN$Z)
> # Set the variable name to a non categorical one
> variable.name = "Z"
> # Count the number o levels of a specific variable
> number.of.levels <- check.levels.one.variable(dataQualiN, variable.name)
> number.of.levels
[1] 500
> # Set the variable name to a categorical variable
> variable.name = "A"
> # Count the number o levels of a specific variable
> number.of.levels <- check.levels.one.variable(dataQualiN, variable.name)
> number.of.levels
[1] 2
> 
> 
> 
> cleanEx()
> nameEx("check.na")
> ### * check.na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.na
> ### Title: Verify variables with NA
> ### Aliases: check.na
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQuantC)
> head(dataQuantC)
           A          B         C         D         E        F        G
1  1.1130829  1.9321639  7.074806  8.660411 0.8815912 24.71950 9.216382
2 -0.2479482 11.3343429 24.347372 23.355432 7.0401132 36.81300 3.678833
3  1.8545084  3.0320201 11.086473 11.055891 3.8345302 22.01718 2.424513
4  0.8339109  3.8579701 11.224775 11.937471 1.0056242 23.28564 6.085473
5  0.4886137  4.5126131 10.000476 12.537179 4.0847458 24.53760 5.117575
6  1.6495578  0.8508169  6.857060  7.094566 6.5108420 27.69884 7.691892
> # Adding NAs to dataQuantC # credits for the random NA code for: https://goo.gl/Xj6caY
> dataQuantC <- as.data.frame(lapply(dataQuantC, function(cc) cc[ sample(c(TRUE, NA),
+                              prob = c(0.85, 0.15), size = length(cc), replace = TRUE) ]))
> # Checking the Nas
> check.na(dataQuantC)
[1] " variable: A has 75 NAs representing 15% of total"
[1] " variable: B has 78 NAs representing 15.6% of total"
[1] " variable: C has 70 NAs representing 14% of total"
[1] " variable: D has 80 NAs representing 16% of total"
[1] " variable: E has 73 NAs representing 14.6% of total"
[1] " variable: F has 81 NAs representing 16.2% of total"
[1] " variable: G has 90 NAs representing 18% of total"

There is a total of  547  NAs on this file[1] 547
> 
> 
> 
> cleanEx()
> nameEx("check.ordered.one.var")
> ### * check.ordered.one.var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.ordered.one.var
> ### Title: Verify if one specific variable of a data set is an ordered
> ###   factor
> ### Aliases: check.ordered.one.var
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQualiN)
> head(dataQualiN)
   A   S   T  L   B   E   X   D
1 no yes  no no yes  no  no yes
2 no yes  no no  no  no  no  no
3 no  no yes no  no yes yes yes
4 no  no  no no yes  no  no yes
5 no  no  no no  no  no  no yes
6 no yes  no no  no  no  no yes
> # Transform variable A into ordered factor
> dataQualiN$A <- ordered(dataQualiN$A)
> # Check variable A and return TRUE
> var.name <- "A"
> check.ordered.one.var(dataQualiN, var.name)
[1] TRUE
> # Check variable B and return FALSE
> var.name <- "B"
> check.ordered.one.var(dataQualiN, var.name)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("check.ordered.to.pa")
> ### * check.ordered.to.pa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.ordered.to.pa
> ### Title: Verifies if there are ordered factor variables to be declared in
> ###   the pa model building process
> ### Aliases: check.ordered.to.pa
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("~/your working directory")
> # Load packages
> library(bnpa)
> # Load the dataset
> data(dataQualiN) # Pre-Loaded
> # Build the BN structure
> bn.structure<-bnlearn::hc(dataQualiN)
> # Show the BN structure learned
> bnlearn::graphviz.plot(bn.structure)
Loading required namespace: Rgraphviz
> # Tranforms variables A and B in ordered factor
> dataQualiN$A <- as.ordered(dataQualiN$A)
> dataQualiN$B <- as.ordered(dataQualiN$B)
> # Generates a list with variables to be ordered and exogenous variables
> cat.var.to.use.in.pa <- bnpa::check.ordered.to.pa(bn.structure, dataQualiN)
> # Show the variables
> cat.var.to.use.in.pa
[[1]]
[1] "'L','B','E','X','D'"

[[2]]
  Variables
1         L
2         B
3         E
4         X
5         D

[[3]]
[1] "'A','S','T'"

[[4]]
  Variables
1         A
2         S
3         T

> 
> 
> 
> cleanEx()
> nameEx("check.outliers")
> ### * check.outliers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.outliers
> ### Title: Indentifies and gives an option to remove outliers
> ### Aliases: check.outliers
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Load the data set
> data(dataQuantC) # Pre-Loaded
> # Set a variable to ask before remove outlier or not
> ask.before = "Y" # or ask.before = "N"
> # Call the procedure to check if there are outliers
> dataQuantC <- check.outliers(dataQuantC, ask.before)


===================================================================
Verifying the outliers of variable: A (type integer)

     Outliers identified..................: 3
     Propotion of outliers................: 0.6%
     Mean of the outliers..................: 1.98
     Mean of data without removing outliers: 0.98
     Mean of data if we remove outliers....: 0.97

Remove outliers of  A  and replace them with NA ? [Y/N] or [ENTER] to exit: 
> 
> 
> 
> cleanEx()
> nameEx("check.type.one.var")
> ### * check.type.one.var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.type.one.var
> ### Title: Verify the type of one variable
> ### Aliases: check.type.one.var
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQuantC)
> head(dataQuantC)
           A          B         C         D         E        F        G
1  1.1130829  1.9321639  7.074806  8.660411 0.8815912 24.71950 9.216382
2 -0.2479482 11.3343429 24.347372 23.355432 7.0401132 36.81300 3.678833
3  1.8545084  3.0320201 11.086473 11.055891 3.8345302 22.01718 2.424513
4  0.8339109  3.8579701 11.224775 11.937471 1.0056242 23.28564 6.085473
5  0.4886137  4.5126131 10.000476 12.537179 4.0847458 24.53760 5.117575
6  1.6495578  0.8508169  6.857060  7.094566 6.5108420 27.69884 7.691892
> # Adding random data to dataQuantC, function will return TRUE
> dataQuantC$Z <- round(runif(500, min=0, max=1000),2)
> # Converting the numeric variable into factor
> dataQuantC$Z <- factor(dataQuantC$Z)
> # Check and return a numeric value correspondig to the variable type
> # Set the variable name
> variable.name = "A"
> # identify the type
> check.type.one.var(dataQuantC, show.message=0, variable.name)
[1] 1
> # Set the variable name
> variable.name = "Z"
> # identify the type
> check.type.one.var(dataQuantC, show.message=0, variable.name)
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("check.types")
> ### * check.types
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.types
> ### Title: Verify types of variable
> ### Aliases: check.types
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQuantC)
> # Show first lines of data set
> head(dataQuantC)
           A          B         C         D         E        F        G
1  1.1130829  1.9321639  7.074806  8.660411 0.8815912 24.71950 9.216382
2 -0.2479482 11.3343429 24.347372 23.355432 7.0401132 36.81300 3.678833
3  1.8545084  3.0320201 11.086473 11.055891 3.8345302 22.01718 2.424513
4  0.8339109  3.8579701 11.224775 11.937471 1.0056242 23.28564 6.085473
5  0.4886137  4.5126131 10.000476 12.537179 4.0847458 24.53760 5.117575
6  1.6495578  0.8508169  6.857060  7.094566 6.5108420 27.69884 7.691892
> # Check and return a numeric value
> show.message <- 1
> bnpa::check.types(dataQuantC, show.message)

 Your data set has variables of type numeric

[1] 2
> # Adding random data to dataQuantC, function will return TRUE
> dataQuantC$Z <- round(runif(500, min=0, max=1000),2)
> # Converting the numeric variable into factor
> dataQuantC$Z <- factor(dataQuantC$Z)
> # Check and return a numeric value correspondig to: 1=integer, 2=numeric, 3=factor, 4=integer and
> # numeric, 5=integer and  factor, 6=numeric and factor or 7=integer, numeric and factor.
> show.message <- 1
> bnpa::check.types(dataQuantC, show.message)

 Your data set has variables of type numeric and factor

[1] 6
> # Supressing the message
> show.message <- 0
> bnpa::check.types(dataQuantC, show.message)
[1] 6
> 
> 
> 
> cleanEx()
> nameEx("check.variables.to.be.ordered")
> ### * check.variables.to.be.ordered
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.variables.to.be.ordered
> ### Title: Check if the variables need to be ordered
> ### Aliases: check.variables.to.be.ordered
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQualiN)
> # Show first lines of data set
> head(dataQualiN)
   A   S   T  L   B   E   X   D
1 no yes  no no yes  no  no yes
2 no yes  no no  no  no  no  no
3 no  no yes no  no yes yes yes
4 no  no  no no yes  no  no yes
5 no  no  no no  no  no  no yes
6 no yes  no no  no  no  no yes
> # Insert categorical variables with more than 2 levels
> dataQualiN$test.variable[dataQualiN$A == "yes"] <- "low"
> dataQualiN$test.variable[dataQualiN$B == "yes"] <- "medium"
> dataQualiN$test.variable[dataQualiN$X == "yes"] <- "high"
> # Transform it to factor variable
> dataQualiN$test.variable <- as.factor(dataQualiN$test.variable)
> # Check the necessity to transform in ordered variables
> bnpa::check.variables.to.be.ordered(dataQualiN)

Variable: test.variable  probably would be categorical ordered because it has  3  levels.
 Check if it is TRUE and in positive situation transform it before start the process ![1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("convert.confusion.matrix")
> ### * convert.confusion.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert.confusion.matrix
> ### Title: Converts the position of any element of confusion matrix to VP,
> ###   FP, FN, VN
> ### Aliases: convert.confusion.matrix
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Creates a confusion matrix
> confusion.matrix <-matrix(c(12395, 4, 377, 1), nrow=2, ncol=2, byrow=TRUE)
> # Creates a vector with the position of VP, FP, FN, VN
> cm.position <- c(4,3,2,1)
> # Shows the original confusion matrix
> confusion.matrix
      [,1] [,2]
[1,] 12395    4
[2,]   377    1
> # Converts the confusion matrix
> confusion.matrix <- convert.confusion.matrix(confusion.matrix, cm.position)


Confusion Matrix of this model
           R e a l i t y     
Modeled    VP 1   FP 377
Modeled    FN 4   VN 12395

Results:
Sensibility: 20 %
Specificity: 97.05 %
PV(+)......: 0.26 %
PV(-)......: 99.97 %
Accuracy...: 97 %
LR(+)......: 6.78 %
LR(-)......: 0.82 %> # Shows the converted confusion matrix
> confusion.matrix
        Reality Reality
Modeled       1     377
Modeled       4   12395
> 
> 
> 
> cleanEx()
> nameEx("create.cluster")
> ### * create.cluster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create.cluster
> ### Title: Create a Parallel Socket Cluster
> ### Aliases: create.cluster
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Clean environment
> ##D closeAllConnections()
> ##D rm(list=ls())
> ##D # Set enviroment
> ##D # setwd("to your working directory")
> ##D # Load packages
> ##D library(bnpa)
> ##D # Use working data sets from package
> ##D data(dataQualiN)
> ##D # Start the cluster
> ##D cl <- bnpa::create.cluster()
> ##D # Set the number of replications
> ##D R=1000
> ##D # Set the algorithm to be used
> ##D algorithm="hc"
> ##D # Executes a parallel bootstrap process
> ##D data.bn.boot.strap=boot.strength(data=dataQualiN,R,algorithm,cluster=cl,
> ##D                                 algorithm.args=list(score="bic"),cpdag = FALSE)
> ##D # Release the cluster
> ##D parallel::stopCluster(cl)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("create.dummies")
> ### * create.dummies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create.dummies
> ### Title: Creates dummy variables in the data set and remove master
> ###   variables
> ### Aliases: create.dummies
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Use working data sets from package
> data(dataQualiN)
> # Show the structure before
> str(dataQualiN)
'data.frame':	500 obs. of  8 variables:
 $ A: Factor w/ 2 levels "no","yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ S: Factor w/ 2 levels "no","yes": 2 2 1 1 1 2 1 2 2 2 ...
 $ T: Factor w/ 2 levels "no","yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ L: Factor w/ 2 levels "no","yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ B: Factor w/ 2 levels "no","yes": 2 1 1 2 1 1 1 2 2 2 ...
 $ E: Factor w/ 2 levels "no","yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ X: Factor w/ 2 levels "no","yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ D: Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 1 2 2 2 ...
> # Set possible dummy variables
> dummy.vars <- c("A", "B")
> # Create dummies
> dataQualiN <- bnpa::create.dummies(dataQualiN, dummy.vars)
> # Show the structure before
> str(dataQualiN)
'data.frame':	500 obs. of  10 variables:
 $ S    : Factor w/ 2 levels "no","yes": 2 2 1 1 1 2 1 2 2 2 ...
 $ T    : Factor w/ 2 levels "no","yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ L    : Factor w/ 2 levels "no","yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ E    : Factor w/ 2 levels "no","yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ X    : Factor w/ 2 levels "no","yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ D    : Factor w/ 2 levels "no","yes": 2 1 2 2 2 2 1 2 2 2 ...
 $ A_no : int  1 1 1 1 1 1 1 1 1 1 ...
 $ A_yes: int  0 0 0 0 0 0 0 0 0 0 ...
 $ B_no : int  0 1 1 0 1 1 1 0 0 0 ...
 $ B_yes: int  1 0 0 1 0 0 0 1 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("gera.bn.structure")
> ### * gera.bn.structure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gera.bn.structure
> ### Title: Learn the Bayesian Network structure from data and build a PA
> ###   model
> ### Aliases: gera.bn.structure
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Clean environment
> ##D closeAllConnections()
> ##D rm(list=ls())
> ##D # Set environment
> ##D # setwd("To your working directory")
> ##D # Load packages
> ##D library(bnpa)
> ##D # Load Data
> ##D data(dataQualiN)
> ##D # Set variables to work
> ##D nreplicates = 1000
> ##D white.list <- NULL
> ##D black.list <- "L-T"
> ##D cb.algorithms = c("gs")
> ##D sb.algorithms = c("hc")
> ##D cb.tests = "jt"
> ##D sb.tests = "aic"
> ##D optimized.option="FALSE"
> ##D outcome.var = "E"
> ##D build.pa = 0
> ##D # Learn the BN from data and save results (data & images)
> ##D gera.bn.structure(dataQualiN, white.list, black.list, nreplicates, cb.algorithms,sb.algorithms,
> ##D                  cb.tests, sb.tests, optimized.option, outcome.var, build.pa)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gera.pa")
> ### * gera.pa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gera.pa
> ### Title: Generates a PA model
> ### Aliases: gera.pa
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Clean environment
> ##D closeAllConnections()
> ##D rm(list=ls())
> ##D # Set enviroment
> ##D # setwd("To your working directory")
> ##D # Load packages
> ##D library(bnpa)
> ##D # Load data sets from package
> ##D data(dataQualiN)
> ##D # Show first lines
> ##D head(dataQualiN)
> ##D # Learn BN structure
> ##D bn.structure <- bnlearn::hc(dataQualiN)
> ##D bnlearn::graphviz.plot(bn.structure)
> ##D # Set variables
> ##D pa.name<-"docPAHC"
> ##D pa.imgname<-"imgPAHC"
> ##D bn.algorithm<-"hc"
> ##D bn.score.test<-"aic-g"
> ##D outcome.var<-"D"
> ##D # Generates the PA model from bn structure
> ##D gera.pa(bn.structure, dataQualiN, pa.name, pa.imgname, bn.algorithm, bn.score.test, outcome.var)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gera.pa.model")
> ### * gera.pa.model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gera.pa.model
> ### Title: Generates PA input model
> ### Aliases: gera.pa.model
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("To your working directory")
> # Load packages
> library(bnpa)
> library(bnlearn)

Attaching package: 'bnlearn'

The following object is masked from 'package:stats':

    sigma

> # load data sets from package
> data(dataQualiN)
> # Show first lines
> head(dataQualiN)
   A   S   T  L   B   E   X   D
1 no yes  no no yes  no  no yes
2 no yes  no no  no  no  no  no
3 no  no yes no  no yes yes yes
4 no  no  no no yes  no  no yes
5 no  no  no no  no  no  no yes
6 no yes  no no  no  no  no yes
> # Learn BN structure
> bn.structure <- hc(dataQualiN)
> bnlearn::graphviz.plot(bn.structure)
> # Set variables
> # Generates the PA model from bn structure
> pa.model <- gera.pa.model(bn.structure, dataQualiN)

Mounting a PA input model...
> pa.model
[1]  \n L  ~  c1* S \n B  ~  c2* S \n E  ~  c3* T + c4* L \n X  ~  c5* E \n D  ~  c6* B + c7* E
> 
> 
> 
> cleanEx()

detaching 'package:bnlearn'

> nameEx("mount.wl.bl.list")
> ### * mount.wl.bl.list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mount.wl.bl.list
> ### Title: Mounts a white or black list
> ### Aliases: mount.wl.bl.list
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("To your working directory")
> # Load packages
> library(bnpa)
> library(bnlearn)

Attaching package: 'bnlearn'

The following object is masked from 'package:stats':

    sigma

> # Load data sets from package
> data(dataQuantC)
> # Show the first lines of data
> head(dataQuantC)
           A          B         C         D         E        F        G
1  1.1130829  1.9321639  7.074806  8.660411 0.8815912 24.71950 9.216382
2 -0.2479482 11.3343429 24.347372 23.355432 7.0401132 36.81300 3.678833
3  1.8545084  3.0320201 11.086473 11.055891 3.8345302 22.01718 2.424513
4  0.8339109  3.8579701 11.224775 11.937471 1.0056242 23.28564 6.085473
5  0.4886137  4.5126131 10.000476 12.537179 4.0847458 24.53760 5.117575
6  1.6495578  0.8508169  6.857060  7.094566 6.5108420 27.69884 7.691892
> # Learn the BN structure without black and white list
> bn.structure <- hc(dataQuantC)
> # Split graph panel in 2 columns
> par(mfrow=c(1,2))
> # Show the BN structure
> bnlearn::graphviz.plot(bn.structure)
> # Mounting the black list
> black.list <- ("A-C,D-F")
> black.list <- mount.wl.bl.list(black.list)
> black.list
  from to
1    A  C
2    D  F
> white.list <- ("A-B,D-G")
> white.list <- mount.wl.bl.list(white.list)
> white.list
  from to
1    A  B
2    D  G
> # Learn the BN structure with black and white list
> bn.structure <- hc(dataQuantC, whitelist = white.list, blacklist = black.list)
> # Show the BN structure
> bnlearn::graphviz.plot(bn.structure)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching 'package:bnlearn'

> nameEx("outcome.predictor.var")
> ### * outcome.predictor.var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: outcome.predictor.var
> ### Title: Builds a black list of predictor and/or outcome variable
> ### Aliases: outcome.predictor.var
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("To your working directory")
> # Load packages
> library(bnpa)
> library(bnlearn)

Attaching package: 'bnlearn'

The following object is masked from 'package:stats':

    sigma

> # Load data sets from package
> data(dataQuantC)
> # Show first lines
> head(dataQuantC)
           A          B         C         D         E        F        G
1  1.1130829  1.9321639  7.074806  8.660411 0.8815912 24.71950 9.216382
2 -0.2479482 11.3343429 24.347372 23.355432 7.0401132 36.81300 3.678833
3  1.8545084  3.0320201 11.086473 11.055891 3.8345302 22.01718 2.424513
4  0.8339109  3.8579701 11.224775 11.937471 1.0056242 23.28564 6.085473
5  0.4886137  4.5126131 10.000476 12.537179 4.0847458 24.53760 5.117575
6  1.6495578  0.8508169  6.857060  7.094566 6.5108420 27.69884 7.691892
> # Create an empty list or fill it before start
> black.list <- ""
> # Setting the type of var as typical "outcome" what means it will not point to any var
> type.var <- "o"
> # Setting variable "A" as "outcome" will create a black from this variable to all others
> var.name <- "A"
> # Creating the black list
> black.list <- outcome.predictor.var(dataQuantC, var.name, type.var, black.list)
> black.list
[1] "A-B,A-C,A-D,A-E,A-F,A-G"
> # Setting the type of var as typical "predictor" it will not be pointed from any other var
> type.var <- "p"
> # Setting variable "D" as "predictor" will create a blacklist from all others to it
> var.name <- "D"
> # Creating the black list
> black.list <- outcome.predictor.var(dataQuantC, var.name, type.var, black.list)
> black.list
[1] "A-B,A-C,A-D,A-E,A-F,A-G,A-D,B-D,C-D,E-D,F-D,G-D"
> 
> 
> 
> cleanEx()

detaching 'package:bnlearn'

> nameEx("preprocess.outliers")
> ### * preprocess.outliers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: preprocess.outliers
> ### Title: Extract information of outliers
> ### Aliases: preprocess.outliers
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> # Load data sets from package
> data(dataQuantC)
> # Set parameters to function
> variable.content <- dataQuantC$A
> variable.name <- "A"
> # Preprocess information
> preprocess.information <- preprocess.outliers(dataQuantC, variable.content, variable.name)


     Outliers identified..................: 3
     Propotion of outliers................: 0.6%
     Mean of the outliers..................: 1.98
     Mean of data without removing outliers: 0.98
     Mean of data if we remove outliers....: 0.97> num.outliers <- preprocess.information[[1]]
> variable.content <- preprocess.information[[2]]
> mean.of.outliers <- preprocess.information[[3]]
> 
> 
> 
> cleanEx()
> nameEx("transf.into.ordinal")
> ### * transf.into.ordinal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transf.into.ordinal
> ### Title: Transform categorical variables into ordinal
> ### Aliases: transf.into.ordinal
> 
> ### ** Examples
> 
> # Clean environment
> closeAllConnections()
> rm(list=ls())
> # Set enviroment
> # setwd("to your working directory")
> # Load packages
> library(bnpa)
> #Load Data
> data(dataQualiN)
> # Transform all variables into ordinal
> dataQualiN <- bnpa::transf.into.ordinal(dataQualiN)
> str(dataQualiN)
'data.frame':	500 obs. of  8 variables:
 $ A: Ord.factor w/ 2 levels "no"<"yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ S: Ord.factor w/ 2 levels "no"<"yes": 2 2 1 1 1 2 1 2 2 2 ...
 $ T: Ord.factor w/ 2 levels "no"<"yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ L: Ord.factor w/ 2 levels "no"<"yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ B: Ord.factor w/ 2 levels "no"<"yes": 2 1 1 2 1 1 1 2 2 2 ...
 $ E: Ord.factor w/ 2 levels "no"<"yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ X: Ord.factor w/ 2 levels "no"<"yes": 1 1 2 1 1 1 1 1 1 1 ...
 $ D: Ord.factor w/ 2 levels "no"<"yes": 2 1 2 2 2 2 1 2 2 2 ...
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.56 0.12 5.28 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
